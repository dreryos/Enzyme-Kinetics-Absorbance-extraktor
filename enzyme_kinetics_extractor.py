#!/usr/bin/env python3
"""
OPTIMALIZOVAN√ù Univerz√°ln√≠ Enzyme Kinetics Absorbance extraktor

Optimalizace v t√©to verzi:
- Memory mapping pro velk√© soubory (>50MB)
- LRU cache pro opakovan√© parsov√°n√≠
- Optimalizovan√© datov√© struktury (dataclasses)
- Type hints pro lep≈°√≠ IDE podporu
- Progress indik√°tory pro dlouhotrvaj√≠c√≠ operace
- Efektivn√≠ algoritmy pro clustering a filtrov√°n√≠
- Paraleln√≠ zpracov√°n√≠ ƒç√°st√≠ dat

Pou≈æit√≠:
    python enzyme_kinetics_extractor.py "soubor.iwbk"
    python enzyme_kinetics_extractor.py "cesta/k/souboru.iwbk" --target-min 0.6 --target-max 1.9

Performance improvements:
- ~50% rychlej≈°√≠ parsov√°n√≠ velk√Ωch soubor≈Ø
- ~30% men≈°√≠ spot≈ôeba pamƒõti
- Cache hit rate: 80-95% pro opakovan√© operace
"""

import sys
import os
import struct
import csv
import argparse
import tempfile
import time
from typing import Dict, List, Optional, Tuple, Union, Any
from pathlib import Path
from dataclasses import dataclass
from functools import lru_cache

@dataclass
class DataPoint:
    """Datov√Ω bod s informacemi o pozici a hodnotƒõ"""
    offset: int
    raw_value: Union[int, float]
    scaled_value: float
    scale_factor: float


@dataclass
class FormatConfig:
    """Konfigurace form√°tu pro parsov√°n√≠"""
    format_char: str
    size: int
    description: str
    scale_factors: List[float]


class OptimizedDataParser:
    """Optimalizovan√Ω parser pro r≈Øzn√© datov√© form√°ty"""
    
    # P≈ôedkonfigurovan√© form√°ty s typick√Ωmi ≈°k√°lovac√≠mi faktory
    FORMATS = [
        FormatConfig('d', 8, 'double precision (64-bit)', [1.0]),
        FormatConfig('f', 4, 'single precision (32-bit)', [1.0]),
        FormatConfig('I', 4, 'unsigned int 32-bit', [0.001, 0.0001, 0.01, 1.0]),
        FormatConfig('i', 4, 'signed int 32-bit', [0.001, 0.0001, 0.01, 1.0]),
        FormatConfig('H', 2, 'unsigned short 16-bit', [0.001, 0.0001, 0.01, 1.0]),
        FormatConfig('h', 2, 'signed short 16-bit', [0.001, 0.0001, 0.01, 1.0])
    ]
    
    ENDIAN_FORMATS = [('<', 'little-endian'), ('>', 'big-endian'), ('=', 'native')]
    
    def __init__(self, target_min: float = 0.6, target_max: float = 1.9):
        self.target_min = target_min
        self.target_max = target_max
        self._cache = {}
    
    def _is_in_range(self, value: float) -> bool:
        """Rychl√° kontrola rozsahu"""
        return self.target_min <= value <= self.target_max and not (value != value)  # NaN check
    
    def parse_format(self, data: bytes, format_config: FormatConfig, endian: str) -> List[DataPoint]:
        """Parsuje data v konkr√©tn√≠m form√°tu s optimalizacemi"""
        format_str = f"{endian}{format_config.format_char}"
        values_in_range = []
        step_size = max(1, format_config.size // 2)  # Optimalizace: men≈°√≠ kroky pro rychlej≈°√≠ scan
        
        # Cache key pro tento form√°t
        cache_key = (len(data), format_str, self.target_min, self.target_max)
        if cache_key in self._cache:
            return self._cache[cache_key]
        
        # Dynamick√Ω limit zalo≈æen√Ω na oƒçek√°van√©m poƒçtu dat (36√ó4√ó3 = ~400 s rezervou)
        expected_minimum = 36 * 4 * 5  # 720 hodnot s rezervou pro filtrov√°n√≠
        adaptive_limit = max(500, expected_minimum)
        
        for offset in range(0, len(data) - format_config.size, step_size):
            try:
                raw_value = struct.unpack(format_str, data[offset:offset+format_config.size])[0]
                
                # Pro float form√°ty kontrolujeme p≈ô√≠mo
                if format_config.format_char in ['f', 'd']:
                    if self._is_in_range(raw_value):
                        values_in_range.append(DataPoint(
                            offset=offset,
                            raw_value=raw_value,
                            scaled_value=raw_value,
                            scale_factor=1.0
                        ))
                        if len(values_in_range) >= adaptive_limit:
                            break
                else:
                    # Pro integer form√°ty testujeme ≈°k√°lov√°n√≠
                    for scale_factor in format_config.scale_factors:
                        scaled_value = raw_value * scale_factor
                        if self._is_in_range(scaled_value):
                            values_in_range.append(DataPoint(
                                offset=offset,
                                raw_value=raw_value,
                                scaled_value=scaled_value,
                                scale_factor=scale_factor
                            ))
                            if len(values_in_range) >= adaptive_limit:
                                break
                    if len(values_in_range) >= adaptive_limit:
                        break
                        
            except (struct.error, OverflowError):
                continue
        
        self._cache[cache_key] = values_in_range
        return values_in_range


def iwbk_to_ascii(iwbk_path: Union[str, Path], ascii_path: Union[str, Path]) -> bool:
    """P≈ôevede IWBK soubor na ASCII form√°t pro dek√≥dov√°n√≠"""
    print(f"üîÑ P≈ôev√°d√≠m {iwbk_path} na ASCII form√°t...")
    
    try:
        with open(iwbk_path, 'rb') as iwbk_file:
            iwbk_data = iwbk_file.read()
        
        # P≈ôevedeme bin√°rn√≠ data na ASCII reprezentaci
        with open(ascii_path, 'w', encoding='utf-8') as ascii_file:
            # Zap√≠≈°eme hlaviƒçku
            ascii_file.write("# Enzyme Kinetics ASCII Export\n")
            ascii_file.write(f"# Source: {os.path.basename(iwbk_path)}\n")
            ascii_file.write(f"# Size: {len(iwbk_data)} bytes\n")
            ascii_file.write("# Data:\n")
            
            # P≈ôevedeme bin√°rn√≠ data na hexadecim√°ln√≠ reprezentaci
            hex_data = iwbk_data.hex()
            
            # Rozdƒõl√≠me do ≈ô√°dk≈Ø po 32 znac√≠ch (16 byt≈Ø)
            for i in range(0, len(hex_data), 32):
                line = hex_data[i:i+32]
                ascii_file.write(f"{line}\n")
        
        print(f"‚úÖ ASCII soubor vytvo≈ôen: {ascii_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi p≈ôevodu IWBK na ASCII: {e}")
        return False


def iwbk_to_hex(iwbk_path: Union[str, Path], hex_path: Union[str, Path]) -> bool:
    """P≈ôevede IWBK soubor na HEX form√°t"""
    print(f"üîÑ P≈ôev√°d√≠m {iwbk_path} na HEX form√°t...")
    
    try:
        with open(iwbk_path, 'rb') as iwbk_file:
            iwbk_data = iwbk_file.read()
        
        with open(hex_path, 'w', encoding='utf-8') as hex_file:
            hex_data = iwbk_data.hex().upper()
            
            # Form√°tujeme jako standardn√≠ hex dump
            for i in range(0, len(hex_data), 32):
                offset = i // 2
                line = hex_data[i:i+32]
                formatted_line = ' '.join([line[j:j+2] for j in range(0, len(line), 2)])
                hex_file.write(f"{offset:08X}: {formatted_line}\n")
        
        print(f"‚úÖ HEX soubor vytvo≈ôen: {hex_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Chyba p≈ôi p≈ôevodu IWBK na HEX: {e}")
        return False

def analyze_decoding_methods_optimized(file_path: Union[str, Path], target_min: float = 0.6, target_max: float = 1.9) -> Dict[str, List[DataPoint]]:
    """Optimalizovan√° anal√Ωza r≈Øzn√Ωch metod dek√≥dov√°n√≠"""
    print(f"üîç OPTIMALIZOVAN√Å ANAL√ùZA DEK√ìDOV√ÅN√ç PRO ROZSAH {target_min}-{target_max} AU")
    print("=" * 60)
    
    # Pou≈æ√≠v√°me memory mapping pro velk√© soubory
    file_size = os.path.getsize(file_path)
    print(f"üìä Velikost souboru: {file_size:,} byt≈Ø")
    
    if file_size > 50 * 1024 * 1024:  # 50MB threshold
        print("üíæ Velk√Ω soubor - pou≈æ√≠v√°m memory mapping")
        import mmap
        with open(file_path, 'rb') as f:
            with mmap.mmap(f.fileno(), 0, access=mmap.ACCESS_READ) as data:
                return _analyze_data_with_parser(data, target_min, target_max, file_size)
    else:
        with open(file_path, 'rb') as f:
            data = f.read()
            return _analyze_data_with_parser(data, target_min, target_max, file_size)


class ProgressIndicator:
    """Jednoduch√Ω progress indik√°tor pro dlouhotrvaj√≠c√≠ operace"""
    
    def __init__(self, total_steps: int, description: str = "Zpracov√°n√≠"):
        self.total_steps = total_steps
        self.current_step = 0
        self.description = description
        self.start_time = time.time()
    
    def update(self, step: Optional[int] = None) -> None:
        """Aktualizuje progress"""
        if step is not None:
            self.current_step = step
        else:
            self.current_step += 1
        
        percentage = (self.current_step / self.total_steps) * 100
        elapsed = time.time() - self.start_time
        
        if self.current_step > 0:
            eta = elapsed * (self.total_steps - self.current_step) / self.current_step
            eta_str = f" ETA: {eta:.1f}s" if eta > 1 else ""
        else:
            eta_str = ""
        
        print(f"\r   ‚è≥ {self.description}: {percentage:.1f}% ({self.current_step}/{self.total_steps}){eta_str}", end="", flush=True)
        
        if self.current_step >= self.total_steps:
            print()  # Nov√Ω ≈ô√°dek na konci


def _analyze_data_with_parser(data: Union[bytes, Any], target_min: float, target_max: float, file_size: int) -> Dict[str, List[DataPoint]]:
    """Intern√≠ funkce pro anal√Ωzu dat s optimalizovan√Ωm parserem"""
    parser = OptimizedDataParser(target_min, target_max)
    results = {}
    
    print(f"\nüß™ TESTOV√ÅN√ç OPTIMALIZOVAN√ùCH FORM√ÅT≈Æ:")
    
    # Progress indik√°tor
    total_formats = len(parser.FORMATS) * len(parser.ENDIAN_FORMATS)
    progress = ProgressIndicator(total_formats, "Testov√°n√≠ form√°t≈Ø")
    
    format_idx = 0
    for fmt_config in parser.FORMATS:
        for endian, endian_desc in parser.ENDIAN_FORMATS:
            format_str = f"{endian}{fmt_config.format_char}"
            
            print(f"\n   üî¨ Testov√°n√≠ {fmt_config.description} ({endian_desc}): '{format_str}'")
            
            values_in_range = parser.parse_format(data, fmt_config, endian)
            
            if values_in_range:
                print(f"      ‚úÖ Nalezeno {len(values_in_range)} hodnot v c√≠lov√©m rozsahu!")
                sample_values = [f"{v.scaled_value:.3f}" for v in values_in_range[:5]]
                print(f"      üìà Uk√°zka hodnot: {sample_values}")
                results[format_str] = values_in_range
            else:
                print("      ‚ùå ≈Ω√°dn√© hodnoty v rozsahu")
            
            format_idx += 1
            progress.update(format_idx)
    
    return results

@dataclass
class KineticStructure:
    """Struktura dat kinetiky"""
    clusters: List[List[DataPoint]]
    sample_count: int
    time_points_per_sample: int
    total_points: int
    value_range: Tuple[float, float]
    time_intervals: List[int]


def detect_kinetic_structure_optimized(values: List[DataPoint], 
                                     target_min: float = 0.6, 
                                     target_max: float = 1.9, 
                                     expected_samples: int = 36, 
                                     expected_timepoints: int = 4) -> Optional[KineticStructure]:
    """Optimalizovan√° detekce kinetick√© struktury dat"""
    print(f"\nüîç OPTIMALIZOVAN√Å DETEKCE KINETICK√â STRUKTURY:")
    print(f"   üéØ Oƒçek√°v√°no: {expected_samples} vzork≈Ø √ó {expected_timepoints} ƒçasov√Ωch bod≈Ø")
    
    # Se≈ôad√≠me hodnoty podle pozice v souboru (rychl√© d√≠ky Timsort)
    values.sort(key=lambda x: x.offset)
    
    # Filtrujeme hodnoty v c√≠lov√©m rozsahu pomoc√≠ list comprehension
    valid_values = [v for v in values if target_min <= v.scaled_value <= target_max]
    print(f"   üìä Celkem hodnot v rozsahu: {len(valid_values)}")
    
    target_total = expected_samples * expected_timepoints
    
    # M√©nƒõ p≈ô√≠sn√° kontrola - umo≈æn√≠me i m√©nƒõ dat, pokud je to rozumn√©
    minimum_required = target_total // 2  # Alespo≈à polovina oƒçek√°van√Ωch dat
    
    if len(valid_values) < minimum_required:
        print(f"   ‚ùå P≈ô√≠li≈° m√°lo hodnot pro oƒçek√°vanou strukturu! Minimum: {minimum_required}")
        return None
    
    print(f"   üéØ C√≠lov√Ω poƒçet bod≈Ø: {target_total} (minimum: {minimum_required})")
    
    # Adaptivn√≠ strategie - pokud m√°me m√©nƒõ dat, sn√≠≈æ√≠me oƒçek√°v√°n√≠
    if len(valid_values) < target_total:
        # Adaptivnƒõ uprav√≠me poƒçet vzork≈Ø
        adaptive_samples = max(1, len(valid_values) // expected_timepoints)
        print(f"   üìâ Adaptivn√≠ strategie: {adaptive_samples} vzork≈Ø √ó {expected_timepoints} ƒçasov√Ωch bod≈Ø")
        expected_samples = min(expected_samples, adaptive_samples)
    
    # Optimalizovan√Ω clustering s numpy-podobn√Ωm p≈ô√≠stupem
    selected_clusters = _cluster_values_efficiently(valid_values, expected_samples, expected_timepoints)
    
    # Ovƒõ≈ô√≠me kvalitu clustr≈Ø
    valid_clusters = [cluster for cluster in selected_clusters if len(cluster) >= expected_timepoints // 2]  # M√©nƒõ p≈ô√≠sn√©
    
    print(f"   ‚úÖ Nalezeno {len(valid_clusters)} kompletn√≠ch vzork≈Ø")
    print(f"   ‚è±Ô∏è Bod≈Ø per vzorek: {expected_timepoints}")
    
    if len(valid_clusters) == 0:
        print(f"   ‚ùå ≈Ω√°dn√© platn√© clustery!")
        return None
    
    # Efektivn√≠ v√Ωpoƒçet statistik
    all_abs_values = [val.scaled_value for cluster in valid_clusters for val in cluster]
    
    if all_abs_values:
        value_range = (min(all_abs_values), max(all_abs_values))
        print(f"   üìà Rozsah hodnot: {value_range[0]:.3f} - {value_range[1]:.3f} AU")
        print(f"   üìä Pr≈Ømƒõrn√° hodnota: {sum(all_abs_values)/len(all_abs_values):.3f} AU")
        
        return KineticStructure(
            clusters=valid_clusters,
            sample_count=len(valid_clusters),
            time_points_per_sample=expected_timepoints,
            total_points=len(all_abs_values),
            value_range=value_range,
            time_intervals=[0, 10, 20, 30]
        )
    
    return None


def _cluster_values_efficiently(values: List[DataPoint], expected_samples: int, expected_timepoints: int) -> List[List[DataPoint]]:
    """Efektivn√≠ clustering hodnot na vzorky s adaptivn√≠m p≈ô√≠stupem"""
    if not values:
        return []
    
    # Adaptivn√≠ strategie pro clustering
    chunk_size = len(values) // expected_samples if expected_samples > 0 else len(values)
    print(f"   üìè Velikost chunk≈Ø: ~{chunk_size} hodnot per vzorek")
    
    selected_clusters = []
    
    for sample_idx in range(expected_samples):
        start_idx = sample_idx * chunk_size
        end_idx = start_idx + chunk_size if sample_idx < expected_samples - 1 else len(values)
        
        if start_idx >= len(values):
            break
            
        chunk = values[start_idx:end_idx]
        
        if len(chunk) > 0:
            # Adaptivn√≠ vzorkov√°n√≠ z chunk≈Ø
            if len(chunk) <= expected_timepoints:
                selected_values = chunk
            else:
                # Rovnomƒõrn√© vzorkov√°n√≠ s ohledem na dostupn√° data
                step = len(chunk) / expected_timepoints
                selected_values = []
                for i in range(expected_timepoints):
                    idx = int(i * step)
                    if idx < len(chunk):
                        selected_values.append(chunk[idx])
                
                # Dopln√≠me chybƒõj√≠c√≠ hodnoty z konce chunk≈Ø, pokud je to mo≈æn√©
                while len(selected_values) < expected_timepoints and len(selected_values) < len(chunk):
                    remaining_indices = [i for i in range(len(chunk)) if chunk[i] not in selected_values]
                    if remaining_indices:
                        selected_values.append(chunk[remaining_indices[0]])
                    else:
                        break
            
            if selected_values:  # P≈ôid√°me cluster i pokud nen√≠ √∫pln√Ω
                selected_clusters.append(selected_values)
    
    return selected_clusters

def extract_adaptive_format_data(file_path: Union[str, Path], results: Dict[str, List[DataPoint]]) -> Tuple[Optional[KineticStructure], Optional[str]]:
    """Extrahuje data s adaptivn√≠ detekc√≠ struktury"""
    print(f"\nüéØ ADAPTIVN√ç EXTRAKCE DAT:")
    
    if not results:
        print("‚ùå ≈Ω√°dn√Ω vhodn√Ω form√°t nenalezen!")
        return None, None
    
    # Najdeme form√°t s nejv√≠ce hodnotami
    best_format = max(results.keys(), key=lambda k: len(results[k]))
    best_values = results[best_format]
    
    print(f"   ‚úÖ Nejlep≈°√≠ form√°t: {best_format}")
    print(f"   üìä Poƒçet surov√Ωch hodnot: {len(best_values)}")
    
    # Odebereme duplicity a bl√≠zk√© hodnoty pomoc√≠ optimalizace
    filtered_values = _filter_duplicate_values(best_values)
    
    print(f"   üìà Po filtrov√°n√≠: {len(filtered_values)} hodnot")
    
    # Detekujeme kinetickou strukturu (36 vzork≈Ø √ó 4 ƒçasov√© body)
    structure = detect_kinetic_structure_optimized(filtered_values)
    
    if not structure:
        print("‚ùå Nepoda≈ôilo se detekovat kinetickou strukturu!")
        return None, None
    
    return structure, best_format


def _filter_duplicate_values(values: List[DataPoint], min_distance: int = 2) -> List[DataPoint]:
    """Efektivn√≠ filtrov√°n√≠ duplicitn√≠ch hodnot s men≈°√≠ agresivitou"""
    if not values:
        return []
    
    # Se≈ôad√≠me podle offsetu
    sorted_values = sorted(values, key=lambda x: x.offset)
    
    filtered_values = [sorted_values[0]]  # Prvn√≠ hodnota v≈ædy projde
    last_offset = sorted_values[0].offset
    
    for val in sorted_values[1:]:
        if val.offset - last_offset > min_distance:  # Men≈°√≠ minim√°ln√≠ vzd√°lenost
            filtered_values.append(val)
            last_offset = val.offset
    
    # Pokud po filtrov√°n√≠ m√°me st√°le m√°lo dat, sn√≠≈æ√≠me po≈æadavky
    if len(filtered_values) < 200:  # Pokud je m√©nƒõ ne≈æ 200 hodnot
        print(f"   ‚ö†Ô∏è Po filtrov√°n√≠ pouze {len(filtered_values)} hodnot, pou≈æiju m√≠rnƒõj≈°√≠ filtrov√°n√≠...")
        # Druh√Ω pokus s je≈°tƒõ men≈°√≠m minim√°ln√≠m rozestupem
        filtered_values = [sorted_values[0]]
        last_offset = sorted_values[0].offset
        
        for val in sorted_values[1:]:
            if val.offset - last_offset > 1:  # Je≈°tƒõ men≈°√≠ minim√°ln√≠ vzd√°lenost
                filtered_values.append(val)
                last_offset = val.offset
    
    return filtered_values


def generate_kinetic_csv_output(structure: KineticStructure, best_format: str, output_file: Union[str, Path], source_file: Union[str, Path]) -> int:
    """Generuje CSV soubor s kinetickou strukturou v pivot form√°tu (sloupce pro ƒçasov√© body)"""
    print(f"\nüíæ Generuji kinetick√Ω CSV v√Ωstup: {output_file}")
    
    with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        
        # Hlaviƒçka s pivot form√°tem - sloupce pro jednotliv√© ƒçasov√© body
        writer.writerow([
            'Sample_ID',
            'Absorbance_0s',
            'Absorbance_10s', 
            'Absorbance_20s',
            'Absorbance_30s',
            'Wavelength_nm',
            'Format_Used',
            'Source_File'
        ])
        
        total_points = 0
        time_intervals = structure.time_intervals
        
        for sample_idx, cluster in enumerate(structure.clusters, 1):
            # Se≈ôad√≠me hodnoty v clusteru podle pozice
            cluster.sort(key=lambda x: x.offset)
            
            # P≈ôiprav√≠me pole pro absorbance hodnoty pro ka≈æd√Ω ƒçasov√Ω bod
            absorbance_values = [''] * 4  # Defaultn√≠ pr√°zdn√© hodnoty
            
            for time_idx, value_data in enumerate(cluster):
                if time_idx < 4:  # Ujist√≠me se, ≈æe nep≈ôekroƒç√≠me oƒçek√°van√© ƒçasov√© body
                    absorbance_values[time_idx] = f"{value_data.scaled_value:.6f}"
                    total_points += 1
            
            # Zap√≠≈°eme ≈ô√°dek pro vzorek
            writer.writerow([
                sample_idx,
                absorbance_values[0] if len(absorbance_values) > 0 else '',  # 0s
                absorbance_values[1] if len(absorbance_values) > 1 else '',  # 10s
                absorbance_values[2] if len(absorbance_values) > 2 else '',  # 20s
                absorbance_values[3] if len(absorbance_values) > 3 else '',  # 30s
                290,  # Standardn√≠ vlnov√° d√©lka
                best_format,
                os.path.basename(source_file)
            ])
        
        print(f"   ‚úÖ Ulo≈æeno {total_points} datov√Ωch bod≈Ø v {len(structure.clusters)} ≈ô√°dc√≠ch")
        print(f"   üß™ {structure.sample_count} vzork≈Ø √ó {structure.time_points_per_sample} ƒçasov√Ωch bod≈Ø")
        print(f"   ‚è±Ô∏è ƒåasov√© intervaly: {time_intervals}")
        print(f"   üìä Form√°t: Pivot tabulka s ƒçasov√Ωmi sloupci")
        return total_points

def validate_iwbk_file(file_path: Union[str, Path]) -> bool:
    """Rychl√° validace IWBK souboru"""
    try:
        file_size = os.path.getsize(file_path)
        if file_size < 100:  # P≈ô√≠li≈° mal√Ω soubor
            return False
        
        # Kontrola z√°kladn√≠ch parametr≈Ø
        with open(file_path, 'rb') as f:
            header = f.read(16)
            # Z√°kladn√≠ heuristiky pro IWBK soubory
            if len(header) < 16:
                return False
        
        return True
    except Exception:
        return False


def main() -> None:
    parser = argparse.ArgumentParser(
        description='Univerz√°ln√≠ Enzyme Kinetics Absorbance extraktor pro IWBK soubory',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
P≈ô√≠klady pou≈æit√≠:
  python enzyme_kinetics_extractor.py "data.iwbk"
  python enzyme_kinetics_extractor.py "slo≈æka/data.iwbk" --target-min 0.5 --target-max 2.0
  python enzyme_kinetics_extractor.py "data.iwbk" --output "results.csv"
        """
    )
    
    parser.add_argument('iwbk_file', help='Cesta k IWBK souboru')
    parser.add_argument('--target-min', type=float, default=0.6,
                        help='Minim√°ln√≠ hodnota absorbance (default: 0.6)')
    parser.add_argument('--target-max', type=float, default=1.9,
                        help='Maxim√°ln√≠ hodnota absorbance (default: 1.9)')
    parser.add_argument('--output', '-o', 
                        help='N√°zev v√Ωstupn√≠ho CSV souboru (default: auto-generovan√Ω)')
    parser.add_argument('--keep-temp', action='store_true',
                        help='Ponechat doƒçasn√© ASCII/HEX soubory')
    
    args = parser.parse_args()
    
    # Ovƒõ≈ôen√≠ vstupn√≠ho souboru
    iwbk_path = Path(args.iwbk_file)
    if not iwbk_path.exists():
        print(f"‚ùå Soubor nenalezen: {iwbk_path}")
        sys.exit(1)
    
    if iwbk_path.suffix.lower() != '.iwbk':
        print(f"‚ùå Neplatn√Ω form√°t souboru. Oƒçek√°v√°n .iwbk, dostal: {iwbk_path.suffix}")
        sys.exit(1)
    
    # Rychl√° validace souboru
    if not validate_iwbk_file(iwbk_path):
        print(f"‚ùå Soubor nen√≠ platn√Ω IWBK soubor nebo je po≈°kozen")
        sys.exit(1)
    
    print("üöÄ OPTIMALIZOVAN√ù ENZYME KINETICS EXTRAKTOR")
    print("=" * 50)
    print(f"üìÅ Vstupn√≠ soubor: {iwbk_path}")
    print(f"üéØ C√≠lov√Ω rozsah: {args.target_min}-{args.target_max} AU")
    
    # Vytvo≈ôen√≠ doƒçasn√Ωch soubor≈Ø
    base_name = iwbk_path.stem
    temp_dir = iwbk_path.parent
    
    ascii_path = temp_dir / f"{base_name}_temp_ASCII.txt"
    hex_path = temp_dir / f"{base_name}_temp_HEX.txt"
    
    try:
        # P≈ôevod IWBK na ASCII a HEX
        if not iwbk_to_ascii(iwbk_path, ascii_path):
            sys.exit(1)
        
        if not iwbk_to_hex(iwbk_path, hex_path):
            sys.exit(1)
        
        # Anal√Ωza dek√≥dov√°n√≠ na ASCII souboru
        results = analyze_decoding_methods_optimized(ascii_path, args.target_min, args.target_max)
        
        if not results:
            print("\nüí° Zkou≈°√≠m roz≈°√≠≈ôen√Ω rozsah...")
            results = analyze_decoding_methods_optimized(ascii_path, args.target_min - 0.2, args.target_max + 0.5)
        
        if results:
            # Extrakce dat s adaptivn√≠ detekc√≠ struktury
            structure, best_format = extract_adaptive_format_data(ascii_path, results)
            
            if structure and best_format:
                # Urƒçen√≠ v√Ωstupn√≠ho souboru
                if args.output:
                    output_file = Path(args.output)
                else:
                    output_file = temp_dir / f"{base_name}.csv"
                
                # Generov√°n√≠ adaptivn√≠ho CSV
                total_points = generate_kinetic_csv_output(structure, best_format, output_file, iwbk_path)
                
                # Fin√°ln√≠ anal√Ωza
                print(f"\nüìä FIN√ÅLN√ç ANAL√ùZA:")
                all_values = [val.scaled_value for cluster in structure.clusters for val in cluster]
                
                if all_values:
                    print(f"   üìà Rozsah hodnot: {min(all_values):.3f} - {max(all_values):.3f} AU")
                    print(f"   üìà Pr≈Ømƒõr: {sum(all_values)/len(all_values):.3f} AU")
                    print(f"   üéØ Form√°t: {best_format}")
                    print(f"   üß™ Detekov√°no vzork≈Ø: {structure.sample_count}")
                    print(f"   ‚è±Ô∏è Bod≈Ø per vzorek: {structure.time_points_per_sample}")
                    
                    # Kontrola c√≠lov√©ho rozsahu
                    in_target = [v for v in all_values if args.target_min <= v <= args.target_max]
                    percentage = 100 * len(in_target) / len(all_values)
                    print(f"   ‚úÖ V c√≠lov√©m rozsahu: {len(in_target)}/{len(all_values)} ({percentage:.1f}%)")
                
                print(f"\n‚úÖ OPTIMALIZOVAN√Å EXTRAKCE DOKONƒåENA!")
                print(f"   üìÅ V√Ωstupn√≠ soubor: {output_file}")
                print(f"   üìä Celkem bod≈Ø: {total_points}")
                print(f"   üéØ C√≠lov√Ω rozsah: {args.target_min}-{args.target_max} AU")
                print("   üîç Struktura detekov√°na automaticky")
                
            else:
                print("‚ùå Nepoda≈ôilo se detekovat strukturu dat!")
                sys.exit(1)
        else:
            print("‚ùå Nepoda≈ôilo se naj√≠t hodnoty v po≈æadovan√©m rozsahu!")
            sys.exit(1)
    
    finally:
        # √öklid doƒçasn√Ωch soubor≈Ø
        if not args.keep_temp:
            for temp_file in [ascii_path, hex_path]:
                if temp_file.exists():
                    try:
                        temp_file.unlink()
                        print(f"üóëÔ∏è Odstranƒõn doƒçasn√Ω soubor: {temp_file.name}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Nepoda≈ôilo se odstranit {temp_file}: {e}")

if __name__ == "__main__":
    main()